@using BizATWebCommon;
@using MongoDB.Bson;
@{
    string examId = Request.QueryString["examId"];
    string currentTester = Request.QueryString["tester"];
}
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>BizExam</title>

    <link rel="stylesheet" type="text/css" href="Content/css/bootstrap.min.css">
    <link type="text/css" rel="stylesheet" href="Content/css/main.css" />
    <link rel="stylesheet" href="Content/css/common.css">
    <link rel="stylesheet" type="text/css" href="~/Content/css/doublebox-bootstrap.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/css/wangEditor.css" />

    <script src="~/Scripts/js/jquery-3.3.1.min.js"></script>
    <script src="~/Scripts/js/html5shiv.min.js"></script>
    <script src="~/Scripts/js/respond.min.js"></script>
    <script type="text/javascript" src="~/Scripts/js/doublebox-bootstrap.js"></script>
    <script type="text/javascript" src="//unpkg.com/wangeditor/release/wangEditor.min.js"></script>

    <script src="~/Scripts/js/popper.min.js"></script>
    <script src="~/Scripts/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="~/Scripts/js/jquery.cookie.js"></script>
    <script>
        var examId = "@examId" || "实习生测试1";
        var currentTester = "@currentTester" || "tester";
        var currentExamPaperInfo = {};
        var singleNum = 0;
        var multiNum = 0;
        var fillingNum = 0;
        var trueFalseNum = 0;
        var shortNum = 0;
        var mixOrderFlag = 0;
        var mixSelectionFlag = 0;

        var timer = null;
        var time = 0;   
        //pause timer
        var time_sec = 0;
        var time_min = 0;
        var time_hour = 0;
        //init answer sheet   
        var answerSheet = {
            tester: 'currentTester',
            id: null,
            examPaperId: null,
            dt: null,
            singles: [],
            multis: [],
            fillings: [],
            TFs: [],
            shorts: [],
            pauseTime: []
        };
        var mixOrderArray = [], mixSelectionArray = [];        
        $(document).ready(function(){
            getExamPaperInfo();
        })
        function getExamPaperInfo() {
           $.ajax({
                type: "post",
                data: { "_id": examId },
                url: "/common/GetExamPaper.ashx",
                async: false,
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    $('.tab-content').hide();
                    $('#noAnyQuestion').html('<h5>Requst Failured!</h5>');
                },
                success: function (data) {
                    var data = JSON.parse(data) || data;
                    if (typeof (data.fail) == 'undefined') {
                        currentExamPaperInfo = data;
                        singleNum = currentExamPaperInfo['single'].length;
                        multiNum = currentExamPaperInfo['multi'].length;
                        fillingNum = currentExamPaperInfo['filling'].length;
                        trueFalseNum = currentExamPaperInfo['TrueFalse'].length;
                        shortNum = currentExamPaperInfo['shortQuestion'].length;
                        /*mixOrderFlag = currentExamPaperInfo['mixOrder'];
                        mixSelectionFlag = currentExamPaperInfo['mixSelection'];*/
                        mixOrderFlag = 0;
                        mixSelectionFlag = 0;
                    } else {
                        $('.tab-content').hide();
                        $('#noAnyQuestion').html('<h5>Failed to parse any question!</h5>');
                    }
                }
           });
        }
        function getQuestionInfo(type, questionNum){
            return currentExamPaperInfo[type][questionNum];
        }
    </script>
</head>
<body>
    <div class="wholePage">
        <div class="head">
            <img class="banner" src="~/Images/IT-Fundamentals-logo.png">
            <sapn class="exit" id="exit" onclick="exit()"><img src="~/Images/ICON/exit.png" alt="Exit" /></sapn>
            <div class="clearboth"></div>
            <div class="navigation" id="navigation">
                <div class="actionBtns">
                     <button id="confirmBtn" class="btn btn-primary" data-toggle="modal" data-target="#submitModal" onclick="startPause()">Submit</button> 
                    <button id="pasueBtn" class="btn btn-dark" data-toggle="modal" data-target="#pauseModal" onclick="startPause()">Pause</button>
                </div>
                <ul class="navigation1 nav nav-pills" role="tablist">
                    <li class="nav-item tabDisabled">
                        <a class="nav-link active " data-toggle="pill" href="#body1" id="singleTab">Single</a>
                    </li>
                    <li class="nav-item tabDisabled">
                        <a class="nav-link" data-toggle="pill" href="#body2" id="multiTab">Multi</a>
                    </li>
                    <li class="nav-item tabDisabled">
                        <a class="nav-link" data-toggle="pill" href="#body3" id="fillingTab">Filling</a>
                    </li>
                    <li class="nav-item tabDisabled">
                        <a class="nav-link" data-toggle="pill" href="#body4" id="trueFalseTab">TrueFalse</a>
                    </li>
                    <li class="nav-item tabDisabled">
                        <a class="nav-link " href="#body5" data-toggle="pill" id="shortTab">ShortQuestion</a>
                    </li>
                </ul>
            </div>
        </div>
        <div class="modal fade" id="navToNextTab">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <p>确认切换到下一题？</p>
                    <div class="navToNextTabBtns">
                        <button id="navConfrim" data-dismiss="modal" class="btn btn-primary" onclick="navToNextTab()">确认</button>
                        <button data-dismiss="modal" class="btn btn-secondary">取消</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="lastTabModal">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <p>已经是最后一道题？</p>
                </div>
            </div>
        </div>
        <div class="tab-content">
            <div id="body1" class="body container-fluid tab-pane active">
                @RenderPage("single.cshtml")
            </div>
            <div id="body2" class="body container-fluid tab-pane">
                @RenderPage("multi.cshtml")
            </div>
            <div id="body3" class="body container-fluid tab-pane">
                @RenderPage("filling.cshtml")         
            </div>
            <div id="body4" class="body container-fluid tab-pane">
                @RenderPage("trueFalse.cshtml")             
            </div>
            <div id="body5" class="body container-fluid tab-pane">
                @RenderPage("shortQuestion.cshtml")            
            </div>
        </div>
        <div id="noAnyQuestion" class="bgColor smallPadding"><h5>No any question!</h5></div>
    </div>
    <div class="modal fade" id="submitModal" tabindex="-1" role="dialog" data-keyboard="false" aria-hidden="true" data-backdrop="static">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <p>确认提交试卷？</p>
                <div class="confirmSubmitPaperBtns">
                    <button id="submitConfrim" class="btn btn-primary" data-dismiss="modal" onclick="submitExamPaperInfo()">确认</button>
                    <button data-dismiss="modal" class="btn btn-secondary" onclick="cancelSubmit()">取消</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="pauseModal" tabindex="-1" role="dialog" aria-labelledby="pauseModalLabel" aria-hidden="true" data-keyboard="false" data-backdrop="static">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                </div>
                <div class="modal-body">
                    <div id="pauseTimer">00:00:00</div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal" id="stopPauseBtn" onclick="stopPauseTimer()">返回</button>
                </div>
            </div>
        </div>
    </div>
    <script>
        $(document).ready(function(){
            $('.nav-link').click(function (event, notCheckAnswerFlag) {
                if(!notCheckAnswerFlag && !$('.tab-content').is(':hidden')){
                    updateTabAnswer();
                }                
                emptyTabContent();
                renderCurrentTabContent($(this));
                $('.tab-content').show();
            })
            $('#pauseModal').on('shown.bs.modal', function () {
                startPauseTimer();
                $('#stopPauseBtn').focus();
            })
            setFirstTabSelected();
            $(document).keydown(function(event){
                var event = event || window.event;
                var keyCode = event.keyCode;
                if(keyCode == 39){
                   $('.nav_next')[0].click();
                }
            });
            $(document).keydown(function(event){
                var event = event || window.event;
                var keyCode = event.keyCode;
                if(keyCode == 37){
                   $('.nav_previous')[0].click();
                }
            });
            $('.nav_next').keydown(function(event){
                var event = event || window.event;
                var keyCode = event.keyCode;
                if(keyCode == 37 || keyCode == 39){
                   event.preventDefault();;
                }
            })
            $('.nav_previous').keydown(function(event){
                var event = event || window.event;
                var keyCode = event.keyCode;
                if(keyCode == 39 || keyCode == 37){
                   event.preventDefault();;
                }
            })
        })
        function setFirstTabSelected(){
            var oFirstTabButton = $('.nav-item').not('.tabDisabled').first().find('a');
            if (oFirstTabButton.length != 0) {
                oFirstTabButton.trigger('click', true);
            } else {
                $('#navigation').hide();
                $('.tab-content').hide();
                $('#noAnyQuestion').show();
            }    
        }
        function getMixOrderArray(len, num){
            if(!mixOrderArray[len]){
                mixOrderArray[len] = [...new Array(len).keys()];
                if(mixOrderFlag){
                    mixOrderArray[len] = shuffleIndex(mixOrderArray[len]);
                }
            }
            return mixOrderArray[len][num];
        }
        function getMixSelectionArray(len, num){
            if(!mixSelectionArray[len]){
               mixSelectionArray[len] = [...new Array(len).keys()];
               if(mixSelectionFlag){
                    mixSelectionArray[len] = shuffleIndex(mixSelectionArray[len]);
                }
            }
            return mixSelectionArray[len][num]
        }
        function returnMixSelectionArray(len, num){
            var array = mixSelectionArray[len];
            for(var i=0; i<array.length; i++){
                if(array[i] == num){
                    return i;
                }
            }
            return num;
        }
        function shuffleIndex(indexArray) {
            var len = indexArray.length;
            for (var i = 0; i < len; i++) {
                var randomIndex = parseInt(Math.random() * (len - 1));
                var current = indexArray[i];
                indexArray[i] = indexArray[randomIndex];
                indexArray[randomIndex] = current;
            }
            return indexArray;
        }
        function formatCharCode(index) {
            return String.fromCharCode((65 + index));
        }
        function formatString(str) {
            var replaceStr = '<input class="inputReset fillingInput" type="text">';
            return str.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/_/g, replaceStr);
        }
        function arrayCompare(arr1, arr2) {
            var ifSame = true;
            if (arr1.length != arr2.length) {
                ifSame = false;
            } else {
                for(var i=0; i<arr1.length; i++){
                    if(arr1[i] != arr2[i]){
                        ifSame = false;
                    }
                }
            }
            return ifSame;
        }
        function navToNextTab(){
            var currentTab = $('.nav-link.active');
            var currentTabItem = currentTab.parent('.nav-item');
            var nextTabItem = currentTabItem.nextAll().not('.tabDisabled').first();
            if (nextTabItem && nextTabItem.length != 0) {
                nextTabItem.find('a').trigger('click', true);
                $('.body.active').find('.questionLabNo').eq(0).trigger('click', true);
                $('.tab-content').show();
            } else {
                $('#lastTabModal').modal('show');
            }
        }
        function setQuestionLabFocus(questionTab, index) {
            var thisButton = $(questionTab).find('.questionLabNo').eq(index);
            if (!thisButton.hasClass('active')) {
                thisButton.parents(questionTab).children('button').removeClass('active');
                thisButton.addClass('active');
            }
            thisButton.focus();
        }
        function getTimer() {
            time = 0;
            clearInterval(timer);
            timer = setInterval(function () {
                time++;
            }, 1000);
        }
        //click pause or submit button
        function startPause() {
            $('.tab-content').hide();
            clearInterval(timer);
            time = 0;
        }
        function startPauseTimer() {
            timer = setInterval(function () {
                time ++;
                time_sec ++;
                if (time_sec > 59) {
                    time_sec = 0;
                    time_min++;
                }
                if (time_min > 59) {
                    time_min = 0;
                    time_hour++;
                }
                var str_sec = time_sec;
                var str_min = time_min;
                var str_hour = time_hour;
                if (time_sec < 10) {
                    str_sec = "0" + time_sec;
                }
                if (time_min < 10) {
                    str_min = "0" + time_min;
                }
                if (time_hour < 10) {
                    str_hour = "0" + time_hour;
                }
                var time_str = str_hour + ":" + str_min + ":" + str_sec;
                $('#pauseTimer').html(time_str);
            }, 1000);
        }
        function stopPauseTimer() {
            $('.tab-content').show();
            clearInterval(timer);
            answerSheet['pauseTime'].push(time);
            $('#pauseTimer').html('00:00:00');
            time_sec = 0;
            time_min = 0;
            time_hour = 0;
            getTimer();
        }
        function cancelSubmit() {
            $('.tab-content').show();
            getTimer();
        }
        function submitExamPaperInfo() {
            updateTabAnswer();
            $.ajax({
                type: "post",
                data: { "Answer": JSON.stringify(answerSheet) },
                url: "/common/PutExamSheet.ashx",
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    window.location.replace('submitExamPaper.cshtml?success=False');
                },
                success: function (data) {
                    window.location.replace('submitExamPaper.cshtml?success=' + data);
                }
            });
        }
        function updateTabAnswer(){
            var currentTab = $('.nav-link.active').attr('id');
            switch (currentTab) {
                case 'singleTab':
                    updateSingleAnswer();
                    break;
                case 'multiTab':
                    updateMultiAnswer();
                    break;
                case 'fillingTab':
                    updateFillingAnswer();
                    break;
                case 'trueFalseTab':
                    updateTrueFalseAnswer();
                    break;
                case 'shortTab':
                    updateShortAnswer();
                    break;
            }
        }
        function emptyTabContent(){
            var currentTab = $('.nav-link.active').attr('id');
            switch (currentTab) {
                case 'singleTab':
                    emptySingleQuestion();
                    break;
                case 'multiTab':
                    emptyMultiQuestion();
                    break;
                case 'fillingTab':
                    emptyFillingQuestion();
                    break;
                case 'trueFalseTab':
                    emptyTrueFalseQuestion();
                    break;
                case 'shortTab':
                    emptyShortQuestion();
                    break;
            }
        }
        function renderCurrentTabContent(currentTab){
            var currentTab = currentTab.attr('id');
            switch (currentTab) {
                case 'singleTab':
                    renderSingleQuestion();
                    break;
                case 'multiTab':
                    renderMultiQuestion();
                    break;
                case 'fillingTab':
                    renderFillingQuestion();
                    break;
                case 'trueFalseTab':
                    renderTrueFalseQuestion();
                    break;
                case 'shortTab':
                    renderShortQuestion();
                    break;
            }
        }
        function setBtnEnabled(obj){
            obj.attr('disabled', false);
        }
        function setBtnDisabled(obj){
            obj.attr('disabled', 'disabled');
        }
        function getAnswer(tab, questionNum){
            return answerSheet[tab][questionNum]['answer'];
        }
        function setAnswer(tab, questionNum, answer){
            answerSheet[tab][questionNum]['answer'] = answer;
        } 
    </script>
</body>
</html>
